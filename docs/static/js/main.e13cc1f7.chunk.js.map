{"version":3,"sources":["redux/actions/postActions.js","redux/reducers/postReducer.js","redux/reducers/index.js","redux/hooks/usePost.js","views/components/Post.js","views/components/PostList.js","views/components/ActionHistoryItem.js","views/components/ActionHistoryItemList.js","views/screens/Main.js","App.js","serviceWorker.js","index.js"],"names":["fetchPosts","limit","dispatch","a","type","Axios","get","then","response","posts","data","Array","isArray","slice","payload","catch","error","movePost","index","action","to","from","travelThroughTime","historyIndex","initialState","list","history","errorMessage","processing","swapPost","postList","fromIndex","toIndex","toPost","fromPost","movedPostId","id","newPostList","postReducer","state","swapResponse","title","date","Date","getTime","historyListCopy","postListCopy","i","length","rootReducer","combineReducers","post","usePost","useDispatch","useSelector","postHistory","postErrorMessage","postProcessing","useCallback","PostActions","useStyles","makeStyles","theme","root","margin","spacing","fontWeight","body","movers","marginLeft","up","color","colors","green","down","red","avatar","backgroundColor","purple","Post","upVisible","userId","downVisible","classes","Card","className","elevation","CardHeader","Avatar","aria-label","Typography","variant","gutterBottom","CardContent","CardActions","disableSpacing","IconButton","onClick","padding","heading","PostList","map","key","marginBottom","bullet","display","transform","fontSize","pos","timeTravelButton","ActionHistoryItem","Grid","container","item","xs","Box","height","moment","diff","flexDirection","alignItems","Button","size","marginTop","cardContent","grey","historyContainer","paddingTop","ActionHistoryItemList","Divider","backdrop","zIndex","drawer","Main","useEffect","Backdrop","open","CircularProgress","style","background","Container","maxWidth","justify","sm","md","lg","xl","App","store","createStore","reducers","applyMiddleware","ReduxThunk","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.e13cc1f7.chunk.js","sourcesContent":["import Axios from 'axios'\r\n\r\nexport const POST_SET_POST_LIST = 'post-list'\r\nexport const POST_SET_ERROR = 'post-error'\r\nexport const POST_SET_PROCESSING = 'post-processing'\r\nexport const POST_MOVE = 'post-moving'\r\nexport const POST_TRAVEL_THROUGH_TIME = 'post-time-travel'\r\n\r\nexport const fetchPosts = (limit = 10) => async (dispatch) => {\r\n  dispatch({ type: POST_SET_PROCESSING })\r\n  await Axios.get('https://jsonplaceholder.typicode.com/posts')\r\n  .then(response => {\r\n    // check whether the response is an arra prior to do array slice\r\n    let posts = [];\r\n    if (response.data && Array.isArray(response.data)) {\r\n      posts = response.data.slice(0, limit)\r\n    }\r\n    dispatch({ type: POST_SET_POST_LIST, payload: posts })\r\n  })\r\n  .catch(error => {\r\n    dispatch({ type: POST_SET_ERROR, payload: error })\r\n  })\r\n}\r\n\r\nexport const movePost = (index, action) => (dispatch) => {\r\n  // determining the 'from' and 'to' indexes of the post going to be moved\r\n  let to = index;\r\n  switch (action) {\r\n    case 'up':\r\n      to--;\r\n      break;\r\n    case 'down':\r\n      to++;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  dispatch({ type: POST_MOVE, payload: { from: index, to } })\r\n}\r\n\r\nexport const travelThroughTime = (historyIndex) => (dispatch) => {\r\n  dispatch({ type: POST_TRAVEL_THROUGH_TIME, payload: historyIndex })\r\n}","import {\r\n  POST_SET_POST_LIST,\r\n  POST_SET_ERROR,\r\n  POST_SET_PROCESSING,\r\n  POST_MOVE,\r\n  POST_TRAVEL_THROUGH_TIME,\r\n} from \"../actions/postActions\";\r\n\r\nconst initialState = {\r\n  list: [],\r\n  history: [],\r\n  errorMessage: \"\",\r\n  processing: false,\r\n};\r\n\r\n/**\r\n * Swapping two post in given post array\r\n * \r\n * @param {array} postList Array of posts\r\n * @param {number} fromIndex Index of the post going to be moved\r\n * @param {number} toIndex Index of the post going to be replaced by moving\r\n */\r\nconst swapPost = (postList, fromIndex, toIndex) => {\r\n  // post going to be replaced\r\n  const toPost = postList[toIndex];\r\n  // will be undefined if out of bound\r\n  if (toPost) {\r\n    // post going to be moved\r\n    const fromPost = postList[fromIndex];\r\n    // swapping the post\r\n    postList[toIndex] = fromPost;\r\n    postList[fromIndex] = toPost;\r\n    // returning the post array with changes, along with moved\r\n    // post id\r\n    return { movedPostId: fromPost.id, newPostList: postList };\r\n  } else {\r\n    // swap didn't happen\r\n    return false;\r\n  }\r\n};\r\n\r\nconst postReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case POST_SET_POST_LIST:\r\n      return { ...state, list: action.payload, processing: false };\r\n    case POST_SET_ERROR:\r\n      return { ...state, errorMessage: action.payload, processing: false };\r\n    case POST_SET_PROCESSING:\r\n      return { ...state, processing: true };\r\n    case POST_MOVE: {\r\n      const fromIndex = action.payload.from;\r\n      const toIndex = action.payload.to;\r\n      const swapResponse = swapPost([...state.list], fromIndex, toIndex);\r\n      // results obtained after post swap\r\n      if (swapResponse) {\r\n        // returning a copy of the existing state replacing the post list with\r\n        // changed post list and, history item is added on top of the to existing history list\r\n        return {\r\n          ...state,\r\n          list: swapResponse.newPostList,\r\n          history: [\r\n            {\r\n              title: `Moved post ${swapResponse.movedPostId} from ${fromIndex} index to ${toIndex} index`,\r\n              date: new Date().getTime(),\r\n              fromIndex,\r\n              toIndex,\r\n            },\r\n            ...state.history,\r\n          ],\r\n        };\r\n      } else {\r\n        // swap didn't happen, returning the copy of the existing state\r\n        return { ...state };\r\n      }\r\n    }\r\n    case POST_TRAVEL_THROUGH_TIME: {\r\n      // index of the history action item in history list where\r\n      // requested to time travel to\r\n      const historyIndex = action.payload;\r\n      // copy of the existing post history list\r\n      const historyListCopy = [...state.history];\r\n      // copy of the existing post list\r\n      let postListCopy = [...state.list];\r\n      // iterating through history list from the latest history to the\r\n      // selected history where time travel is requested\r\n      for (let i = 0; i <= historyIndex; i++) {\r\n        // a previosu action is obtained\r\n        const history = historyListCopy[i];\r\n        // rolling back this action by reverse swapping the moved post during that action\r\n        const swapResponse = swapPost(postListCopy, history.toIndex, history.fromIndex);\r\n        // response is obtained\r\n        if (swapResponse) {\r\n          // replacing the copied post list each time a reverse swapping succeeded\r\n          postListCopy = swapResponse.newPostList;\r\n        }\r\n      }\r\n      // returing a copy of the existing state with the changed post list and where \r\n      // time traveled hsitory items being chopped off from the hsitory item list\r\n      return {\r\n        ...state,\r\n        list: postListCopy,\r\n        history: historyListCopy.slice(historyIndex + 1, historyListCopy.length),\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default postReducer;\r\n","import { combineReducers } from 'redux'\r\nimport postReducer from './postReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n  post: postReducer,\r\n})\r\n\r\nexport default rootReducer","import { useCallback } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport * as PostActions from '../actions/postActions';\r\n\r\n/**\r\n * Hook for handle post related operations asynchonously. Redux related operations (Ex: dispatching)\r\n * are encapsulated so UIs will be more clean.\r\n */\r\nconst usePost = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { list, history, errorMessage, processing } = useSelector(state => state.post);\r\n  \r\n  /**\r\n   * Fetch array of posts from server\r\n   * \r\n   * @param {number} limit \r\n   * Number of posts needs to be included in the post list response. Default is 10. \r\n   */\r\n  const fetchPosts = useCallback(async(limit) => {\r\n    return await dispatch(PostActions.fetchPosts(limit));\r\n  }, [dispatch]);\r\n\r\n  /**\r\n   * Move a post up or down\r\n   * \r\n   * @param {number} index Current position of the post going to be moved \r\n   * @param {string} action Either 'up' or 'down' \r\n   */\r\n  const movePost = useCallback(async(index, action) => {\r\n    return await dispatch(PostActions.movePost(index, action));\r\n  }, [dispatch]);\r\n\r\n  /**\r\n   * Rolling back the changes up until a certain ponit of action history\r\n   * \r\n   * @param {string} historyIndex Index of the action history item in the history array \r\n   */\r\n  const travelThroughTime = useCallback(async(historyIndex) => {\r\n    return await dispatch(PostActions.travelThroughTime(historyIndex));\r\n  }, [dispatch]);\r\n\r\n  // returning states of post and async operations\r\n  return {\r\n    postList: list,\r\n    postHistory: history,\r\n    postErrorMessage: errorMessage,\r\n    postProcessing: processing,\r\n    fetchPosts,\r\n    movePost,\r\n    travelThroughTime,\r\n  }\r\n};\r\n\r\nexport default usePost;\r\n","import React from \"react\";\r\nimport usePost from \"../../redux/hooks/usePost\";\r\nimport {\r\n  Avatar,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  CardHeader,\r\n  colors,\r\n  IconButton,\r\n  makeStyles,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport {\r\n  ArrowUpward as UpIcon,\r\n  ArrowDownward as DownIcon,\r\n} from \"@material-ui/icons\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    margin: theme.spacing(2),\r\n  },\r\n  title: {\r\n    fontWeight: \"bold\",\r\n  },\r\n  body: {\r\n    fontWeight: \"lighter\",\r\n  },\r\n  movers: {\r\n    marginLeft: \"auto\",\r\n  },\r\n  up: {\r\n    color: colors.green[700],\r\n  },\r\n  down: {\r\n    color: colors.red[700],\r\n  },\r\n  avatar: {\r\n    backgroundColor: colors.purple[400]\r\n  }\r\n}));\r\n\r\n/**\r\n * Single post element\r\n * \r\n * @param {number} index Index of this post in post array \r\n * @param {number} id ID of the post\r\n * @param {string} title Title of the post\r\n * @param {string} body Body (description) of the post\r\n * @param {number} userId ID of the user of this post\r\n * @param {boolean} upVisible Pass 'true' if Up arrow needs to be visible\r\n * @param {boolean} downVisible Pass 'true' if Down arrow needs to be visible\r\n */\r\nconst Post = ({ index, id, title, body, userId, upVisible, downVisible }) => {\r\n  const classes = useStyles();\r\n  // importing the movePost function from isePost hook\r\n  const { movePost } = usePost();\r\n  return (\r\n    <Card className={classes.root} elevation={2}>\r\n      <CardHeader\r\n        avatar={\r\n          <Avatar aria-label=\"recipe\" className={classes.avatar}>\r\n            {id}\r\n          </Avatar>\r\n        }\r\n        title={\r\n          <Typography\r\n            variant=\"subtitle1\"\r\n            gutterBottom\r\n            className={classes.title}\r\n          >\r\n            {title}\r\n          </Typography>\r\n        }\r\n      />\r\n      <CardContent>\r\n        <Typography variant=\"subtitle2\" gutterBottom className={classes.body}>\r\n          {body}\r\n        </Typography>\r\n      </CardContent>\r\n      <CardActions disableSpacing>\r\n        <div className={classes.movers}>\r\n          {upVisible && (\r\n            <IconButton\r\n              aria-label=\"move up\"\r\n              onClick={() => {\r\n                movePost(index, \"up\");\r\n              }}\r\n            >\r\n              <UpIcon className={classes.up} />\r\n            </IconButton>\r\n          )}\r\n          {downVisible && (\r\n            <IconButton\r\n              aria-label=\"move down\"\r\n              onClick={() => {\r\n                movePost(index, \"down\");\r\n              }}\r\n            >\r\n              <DownIcon className={classes.down} />\r\n            </IconButton>\r\n          )}\r\n        </div>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n};\r\n\r\n// prop validation\r\nPost.propTypes = {\r\n  index: PropTypes.number.isRequired, \r\n  id: PropTypes.number.isRequired, \r\n  title: PropTypes.string.isRequired, \r\n  body: PropTypes.string.isRequired, \r\n  userId: PropTypes.number, \r\n  upVisible: PropTypes.bool.isRequired,\r\n  downVisible: PropTypes.bool.isRequired,\r\n}\r\n\r\nexport default Post;\r\n","import React from \"react\";\r\nimport usePost from \"../../redux/hooks/usePost\";\r\nimport { makeStyles, Typography } from \"@material-ui/core\";\r\nimport Post from \"../components/Post\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n  heading: {\r\n    margin: theme.spacing(2),\r\n    color: \"white\",\r\n  },\r\n}));\r\n\r\n/**\r\n * Component to showing basic list of posts\r\n */\r\nconst PostList = () => {\r\n  const classes = useStyles();\r\n  // referencing the post list state\r\n  const { postList } = usePost();\r\n  return (\r\n    <div className={classes.root}>\r\n      <Typography className={classes.heading} variant=\"h4\">\r\n        Sortable Post List\r\n      </Typography>\r\n        {postList.map((post, index) => (\r\n          <Post\r\n            key={`post-key-${post.id}`}\r\n            index={index}\r\n            {...post}\r\n            upVisible={index !== 0}\r\n            downVisible={index + 1 < postList.length}\r\n          />\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostList;\r\n","import React from \"react\";\r\nimport usePost from \"../../redux/hooks/usePost\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  colors,\r\n  Grid,\r\n  makeStyles,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport moment from \"moment\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  bullet: {\r\n    display: \"inline-block\",\r\n    margin: \"0 2px\",\r\n    transform: \"scale(0.8)\",\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n  timeTravelButton: {\r\n    backgroundColor: colors.green[400],\r\n    color: \"white\",\r\n  },\r\n}));\r\n\r\n/**\r\n * Single post action history element\r\n * \r\n * @param {number} index Index of this post action history in post array \r\n * @param {string} title Title of the post action history\r\n * @param {number} date Date in milliseconds\r\n * @param {number} fromIndex Index of the post in post array, before this action happened\r\n * @param {number} toIndex Index of the post in post array, after this action happened\r\n */\r\nconst ActionHistoryItem = ({ index, title, date, fromIndex, toIndex }) => {\r\n  const classes = useStyles();\r\n  const { travelThroughTime } = usePost();\r\n  return (\r\n    <Card className={classes.root} elevation={2}>\r\n      <CardContent>\r\n        <Grid container>\r\n          <Grid item xs>\r\n            <Box height={70}>\r\n              <Typography variant=\"subtitle1\" gutterBottom>\r\n                {title}\r\n              </Typography>\r\n              <Typography variant=\"caption\" gutterBottom>\r\n                {moment().diff(moment(date), \"seconds\")} seconds ago\r\n              </Typography>\r\n            </Box>\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <Box\r\n              display=\"flex\"\r\n              flexDirection=\"row-reverse\"\r\n              alignItems=\"flex-end\"\r\n              height={70}\r\n            >\r\n              <Box>\r\n                <Button\r\n                  size=\"small\"\r\n                  variant=\"contained\"\r\n                  className={classes.timeTravelButton}\r\n                  onClick={() => {\r\n                    travelThroughTime(index);\r\n                  }}\r\n                >\r\n                  Time Travel\r\n                </Button>\r\n              </Box>\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\n// prop validation\r\nActionHistoryItem.propTypes = {\r\n  index: PropTypes.number.isRequired, \r\n  id: PropTypes.number.isRequired, \r\n  date: PropTypes.number.isRequired, \r\n  fromIndex: PropTypes.number, \r\n  toIndex: PropTypes.number, \r\n}\r\n\r\nexport default ActionHistoryItem;\r\n","import {\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  colors,\r\n  Divider,\r\n  makeStyles,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport usePost from \"../../redux/hooks/usePost\";\r\nimport ActionHistoryItem from \"./ActionHistoryItem\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    marginTop: theme.spacing(6),\r\n  },\r\n  heading: {\r\n    margin: theme.spacing(2),\r\n  },\r\n  cardContent: {\r\n    backgroundColor: colors.grey[100],\r\n  },\r\n  historyContainer: {\r\n    paddingTop: theme.spacing(2),\r\n  },\r\n}));\r\n\r\n/**\r\n * Component to show post action history list\r\n */\r\nconst ActionHistoryItemList = () => {\r\n  const classes = useStyles();\r\n  // referencing the post history list state\r\n  const { postHistory } = usePost();\r\n  return (\r\n    <Card className={classes.root} elevation={5}>\r\n      <CardHeader title=\"List of action commited\" />\r\n      <Divider />\r\n      <CardContent className={classes.cardContent}>\r\n        {/* Info text when there is not history to show */}\r\n        {postHistory.length === 0 && (\r\n          <Typography variant=\"subtitle1\">\r\n            Move some post to generate action history . . .\r\n          </Typography>\r\n        )}\r\n        <div className={classes.historyContainer}>\r\n          {postHistory.map((history, index) => (\r\n            <ActionHistoryItem\r\n              key={`history-key-${index}`}\r\n              index={index}\r\n              {...history}\r\n            />\r\n          ))}\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ActionHistoryItemList;\r\n","import React, { useEffect } from \"react\";\r\nimport { Container, Grid } from \"@material-ui/core\";\r\nimport PostList from \"../components/PostList\";\r\nimport ActionHistoryItemList from \"../components/ActionHistoryItemList\";\r\nimport usePost from \"../../redux/hooks/usePost\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: '#3949AB',\r\n    backgroundColor: 'white',\r\n  },\r\n}));\r\n\r\nconst Main = () => {\r\n  const classes = useStyles();\r\n  const { postProcessing, postErrorMessage, fetchPosts } = usePost();\r\n\r\n  // initiating post fecth\r\n  useEffect(() => {\r\n    // requesting the exact amount of post needed\r\n    fetchPosts(5);\r\n  }, [fetchPosts]);\r\n\r\n  return postProcessing ? (\r\n    // showing a backdrop untill posts getting fetched\r\n    <Backdrop open={true} className={classes.backdrop}>\r\n      <CircularProgress />\r\n    </Backdrop>\r\n  ) : postErrorMessage !== \"\" ? (\r\n    // showing the error from post request over network\r\n    postErrorMessage\r\n  ) : (\r\n    <div\r\n      style={{\r\n        background:\r\n          \"linear-gradient(172deg, #3949AB 0%, #3949AB 15%, #EEEEEE 15%, #EEEEEE 100%)\",\r\n      }}\r\n    >\r\n      <Container maxWidth=\"lg\">\r\n        <Grid container justify=\"center\" spacing={2}>\r\n          <Grid item xs={12} sm={12} md={6} lg={7} xl={8}>\r\n            {/* Where posts going to be */}\r\n            <PostList />\r\n          </Grid>\r\n          <Grid item xs={12} sm={12} md={6} lg={5} xl={4}>\r\n            {/* Where history items going to be */}\r\n            <ActionHistoryItemList />\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from 'react'\n\n// import redux related components\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport ReduxThunk from 'redux-thunk'\nimport reducers from './redux/reducers'\n\n// importing screens\nimport { default as MainScreen } from './views/screens/Main'\n\nconst App = () => {\n  return (\n    <Provider store={createStore(reducers, {}, applyMiddleware(ReduxThunk))}>\n      <MainScreen />\n    </Provider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}