{"version":3,"sources":["redux/actions/postActions.js","redux/reducers/postReducer.js","redux/reducers/index.js","redux/hooks/usePost.js","views/components/Post.js","views/components/PostList.js","views/components/ActionHistoryItem.js","views/components/ActionHistoryItemList.js","views/screens/Main.js","App.js","serviceWorker.js","index.js"],"names":["fetchPosts","limit","dispatch","a","type","Axios","get","then","response","posts","data","Array","isArray","slice","payload","catch","error","movePost","index","action","to","from","travelThroughTime","historyIndex","initialState","list","history","errorMessage","processing","swapPost","postList","fromIndex","toIndex","toPost","fromPost","movedPostId","id","newPostList","postReducer","state","swapResponse","title","date","Date","toString","newHistory","postListCopy","i","length","rootReducer","combineReducers","post","usePost","useDispatch","useSelector","postHistory","postErrorMessage","postProcessing","useCallback","PostActions","useStyles","makeStyles","fontWeight","body","Post","upVisible","userId","downVisible","classes","ListItem","ListItemAvatar","Avatar","ListItemText","primary","Typography","variant","gutterBottom","className","secondary","ListItemSecondaryAction","IconButton","edge","aria-label","onClick","PostList","List","map","key","root","minWidth","bullet","display","margin","transform","fontSize","pos","marginBottom","ActionHistoryItem","Card","CardContent","CardActions","Button","size","ActionHistoryItemList","Main","useEffect","Container","maxWidth","Grid","container","justify","spacing","item","xs","sm","md","lg","xl","App","store","createStore","reducers","applyMiddleware","ReduxThunk","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.2bc29dc2.chunk.js","sourcesContent":["import Axios from 'axios'\r\n\r\nexport const POST_SET_POST_LIST = 'post-list'\r\nexport const POST_SET_ERROR = 'post-error'\r\nexport const POST_SET_PROCESSING = 'post-processing'\r\nexport const POST_MOVE = 'post-moving'\r\nexport const POST_TRAVEL_THROUGH_TIME = 'post-time-travel'\r\n\r\nexport const fetchPosts = (limit = 10) => async (dispatch) => {\r\n  dispatch({ type: POST_SET_PROCESSING })\r\n  await Axios.get('https://jsonplaceholder.typicode.com/posts')\r\n  .then(response => {\r\n    // check whether the response is an arra prior to do array slice\r\n    let posts = [];\r\n    if (response.data && Array.isArray(response.data)) {\r\n      posts = response.data.slice(0, limit)\r\n    }\r\n    dispatch({ type: POST_SET_POST_LIST, payload: posts })\r\n  })\r\n  .catch(error => {\r\n    dispatch({ type: POST_SET_ERROR, payload: error })\r\n  })\r\n}\r\n\r\nexport const movePost = (index, action) => (dispatch) => {\r\n  // determining the from and to indexes post going to be moved\r\n  let to = index;\r\n  switch (action) {\r\n    case 'up':\r\n      to--;\r\n      break;\r\n    case 'down':\r\n      to++;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  dispatch({ type: POST_MOVE, payload: { from: index, to } })\r\n}\r\n\r\nexport const travelThroughTime = (historyIndex) => (dispatch) => {\r\n  dispatch({ type: POST_TRAVEL_THROUGH_TIME, payload: historyIndex })\r\n}","import {\r\n  POST_SET_POST_LIST,\r\n  POST_SET_ERROR,\r\n  POST_SET_PROCESSING,\r\n  POST_MOVE,\r\n  POST_TRAVEL_THROUGH_TIME,\r\n} from \"../actions/postActions\";\r\n\r\nconst initialState = {\r\n  list: [],\r\n  history: [],\r\n  errorMessage: \"\",\r\n  processing: false,\r\n};\r\n\r\nconst swapPost = (postList, fromIndex, toIndex) => {\r\n  const toPost = postList[toIndex];\r\n  if (toPost) {\r\n    const fromPost = postList[fromIndex];\r\n    postList[toIndex] = fromPost;\r\n    postList[fromIndex] = toPost;\r\n    return { movedPostId: fromPost.id, newPostList: postList };\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst postReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case POST_SET_POST_LIST:\r\n      return { ...state, list: action.payload, processing: false };\r\n    case POST_SET_ERROR:\r\n      return { ...state, errorMessage: action.payload, processing: false };\r\n    case POST_SET_PROCESSING:\r\n      return { ...state, processing: true };\r\n    case POST_MOVE: {\r\n      const fromIndex = action.payload.from;\r\n      const toIndex = action.payload.to;\r\n      const swapResponse = swapPost([...state.list], fromIndex, toIndex);\r\n      if (swapResponse) {\r\n        return {\r\n          ...state,\r\n          list: swapResponse.newPostList,\r\n          history: [\r\n            {\r\n              title: `Moved post ${swapResponse.movedPostId} from ${fromIndex} index to ${toIndex} index`,\r\n              date: new Date().toString(),\r\n              fromIndex,\r\n              toIndex,\r\n            },\r\n            ...state.history,\r\n          ],\r\n        };\r\n      } else {\r\n        return { ...state };\r\n      }\r\n    }\r\n    case POST_TRAVEL_THROUGH_TIME: {\r\n      const historyIndex = action.payload;\r\n      const newHistory = [...state.history];\r\n      let postListCopy = [...state.list];\r\n      for (let i = 0; i <= historyIndex; i++) {\r\n        const history = newHistory[i];\r\n        const swapResponse = swapPost(postListCopy, history.toIndex, history.fromIndex);\r\n        if (swapResponse) {\r\n          postListCopy = swapResponse.newPostList;\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        list: postListCopy,\r\n        history: newHistory.slice(historyIndex + 1, newHistory.length),\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default postReducer;\r\n","import { combineReducers } from 'redux'\r\nimport postReducer from './postReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n  post: postReducer,\r\n})\r\n\r\nexport default rootReducer","import { useCallback } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport * as PostActions from '../actions/postActions';\r\n\r\nconst usePost = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { list, history, errorMessage, processing } = useSelector(state => state.post);\r\n  \r\n  /**\r\n   * Fetch array of posts from server\r\n   * \r\n   * @param {number} limit \r\n   * Number of posts needs to be included in the post list response. Default is 10. \r\n   */\r\n  const fetchPosts = useCallback(async(limit) => {\r\n    return await dispatch(PostActions.fetchPosts(limit));\r\n  }, [dispatch]);\r\n\r\n  const movePost = useCallback(async(index, action) => {\r\n    return await dispatch(PostActions.movePost(index, action));\r\n  }, [dispatch]);\r\n\r\n  const travelThroughTime = useCallback(async(historyIndex) => {\r\n    return await dispatch(PostActions.travelThroughTime(historyIndex));\r\n  }, [dispatch]);\r\n\r\n  return {\r\n    postList: list,\r\n    postHistory: history,\r\n    postErrorMessage: errorMessage,\r\n    postProcessing: processing,\r\n    fetchPosts,\r\n    movePost,\r\n    travelThroughTime,\r\n  }\r\n};\r\n\r\nexport default usePost;\r\n","import React from \"react\";\r\nimport usePost from \"../../redux/hooks/usePost\";\r\nimport {\r\n  Avatar,\r\n  IconButton,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  ListItemSecondaryAction,\r\n  ListItemText,\r\n  makeStyles,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport {\r\n  ArrowUpward as UpIcon,\r\n  ArrowDownward as DownIcon,\r\n} from \"@material-ui/icons\";\r\n\r\nconst useStyles = makeStyles({\r\n  title: {\r\n    fontWeight: \"bold\",\r\n  },\r\n  body: {\r\n    fontWeight: \"lighter\",\r\n  },\r\n});\r\n\r\nconst Post = ({ index, id, title, body, userId, upVisible, downVisible }) => {\r\n  const classes = useStyles();\r\n  const { movePost } = usePost();\r\n  return (\r\n    <ListItem>\r\n      <ListItemAvatar>\r\n        <Avatar>{id}</Avatar>\r\n      </ListItemAvatar>\r\n      <ListItemText\r\n        primary={\r\n          <Typography\r\n            variant=\"subtitle1\"\r\n            gutterBottom\r\n            className={classes.title}\r\n          >\r\n            {title}\r\n          </Typography>\r\n        }\r\n        secondary={\r\n          <Typography variant=\"subtitle2\" gutterBottom className={classes.body}>\r\n            {body}\r\n          </Typography>\r\n        }\r\n      />\r\n      <ListItemSecondaryAction>\r\n        {upVisible && (\r\n          <IconButton\r\n            edge=\"end\"\r\n            aria-label=\"up\"\r\n            onClick={() => {\r\n              movePost(index, \"up\");\r\n            }}\r\n          >\r\n            <UpIcon />\r\n          </IconButton>\r\n        )}\r\n        {downVisible && (\r\n          <IconButton\r\n            edge=\"end\"\r\n            aria-label=\"down\"\r\n            onClick={() => {\r\n              movePost(index, \"down\");\r\n            }}\r\n          >\r\n            <DownIcon />\r\n          </IconButton>\r\n        )}\r\n      </ListItemSecondaryAction>\r\n    </ListItem>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React from \"react\";\r\nimport usePost from \"../../redux/hooks/usePost\";\r\nimport { List } from \"@material-ui/core\";\r\nimport Post from \"../components/Post\";\r\n\r\nconst PostList = () => {\r\n  const { postList } = usePost();\r\n  return (\r\n    <List>\r\n      {postList.map((post, index) => (\r\n        <Post\r\n          key={`post-key-${post.id}`}\r\n          index={index}\r\n          {...post}\r\n          upVisible={index !== 0}\r\n          downVisible={index + 1 < postList.length}\r\n        />\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default PostList;\r\n","import React from \"react\";\r\nimport usePost from \"../../redux/hooks/usePost\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  makeStyles,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n  },\r\n  bullet: {\r\n    display: \"inline-block\",\r\n    margin: \"0 2px\",\r\n    transform: \"scale(0.8)\",\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n});\r\n\r\nconst ActionHistoryItem = ({ index, title, date, fromIndex, toIndex }) => {\r\n  const classes = useStyles();\r\n  const { travelThroughTime } = usePost();\r\n  return (\r\n    <Card className={classes.root} variant=\"outlined\">\r\n      <CardContent>\r\n        <Typography variant=\"subtitle1\" gutterBottom>\r\n          {title}\r\n        </Typography>\r\n        <Typography variant=\"caption\" gutterBottom>\r\n          {date}\r\n        </Typography>\r\n        {fromIndex} {toIndex}\r\n      </CardContent>\r\n      <CardActions>\r\n        <Button\r\n          size=\"small\"\r\n          onClick={() => {\r\n            travelThroughTime(index);\r\n          }}\r\n        >\r\n          Time Travel\r\n        </Button>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ActionHistoryItem;\r\n","import React from \"react\";\r\nimport usePost from \"../../redux/hooks/usePost\";\r\nimport ActionHistoryItem from \"./ActionHistoryItem\";\r\n\r\nconst ActionHistoryItemList = () => {\r\n  const { postHistory } = usePost();\r\n  return (\r\n    <div>\r\n      {postHistory.map((history, index) => (\r\n        <ActionHistoryItem\r\n          key={`history-key-${index}`}\r\n          index={index}\r\n          {...history}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ActionHistoryItemList;\r\n","import React, { useEffect } from 'react'\r\nimport { Container, Grid } from '@material-ui/core'\r\nimport PostList from '../components/PostList'\r\nimport ActionHistoryItemList from '../components/ActionHistoryItemList'\r\nimport usePost from '../../redux/hooks/usePost'\r\n\r\nconst Main = () => {\r\n  // using the state of post and its' actions\r\n  const {\r\n    postProcessing,\r\n    postErrorMessage,\r\n    fetchPosts,\r\n  } = usePost();\r\n\r\n  // fetching posts on initial load\r\n  useEffect(() => {\r\n    fetchPosts(5);\r\n  }, [fetchPosts])\r\n\r\n  return <Container maxWidth=\"lg\">\r\n    <Grid container justify=\"center\" spacing={2}>\r\n      <Grid item xs={12} sm={12} md={6} lg={7} xl={8}>\r\n        {/* Where posts going to be */}\r\n        <PostList />\r\n      </Grid>\r\n      <Grid item xs={12} sm={12} md={6} lg={5} xl={4}>\r\n        {/* Where history items going to be */}\r\n        <ActionHistoryItemList />\r\n      </Grid>\r\n    </Grid>\r\n  </Container>\r\n}\r\n\r\nexport default Main\r\n","import React from 'react'\n\n// import redux related components\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport ReduxThunk from 'redux-thunk'\nimport reducers from './redux/reducers'\n\n// importing screens\nimport { default as MainScreen } from './views/screens/Main'\n\nconst App = () => {\n  return (\n    <Provider store={createStore(reducers, {}, applyMiddleware(ReduxThunk))}>\n      <MainScreen />\n    </Provider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}